// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.legendsbsc.wallet.viewmodel;

import com.legendsbsc.wallet.interact.CreateWalletInteract;
import com.legendsbsc.wallet.interact.DeleteWalletInteract;
import com.legendsbsc.wallet.interact.ExportWalletInteract;
import com.legendsbsc.wallet.interact.FetchWalletsInteract;
import com.legendsbsc.wallet.interact.FindDefaultWalletInteract;
import com.legendsbsc.wallet.interact.SetDefaultWalletInteract;
import com.legendsbsc.wallet.router.ImportWalletRouter;
import com.legendsbsc.wallet.router.TransactionsRouter;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class WalletsViewModelFactory_Factory implements Factory<WalletsViewModelFactory> {
  private final Provider<CreateWalletInteract> createWalletInteractProvider;

  private final Provider<SetDefaultWalletInteract> setDefaultWalletInteractProvider;

  private final Provider<DeleteWalletInteract> deleteWalletInteractProvider;

  private final Provider<FetchWalletsInteract> fetchWalletsInteractProvider;

  private final Provider<FindDefaultWalletInteract> findDefaultWalletInteractProvider;

  private final Provider<ExportWalletInteract> exportWalletInteractProvider;

  private final Provider<ImportWalletRouter> importWalletRouterProvider;

  private final Provider<TransactionsRouter> transactionsRouterProvider;

  public WalletsViewModelFactory_Factory(
      Provider<CreateWalletInteract> createWalletInteractProvider,
      Provider<SetDefaultWalletInteract> setDefaultWalletInteractProvider,
      Provider<DeleteWalletInteract> deleteWalletInteractProvider,
      Provider<FetchWalletsInteract> fetchWalletsInteractProvider,
      Provider<FindDefaultWalletInteract> findDefaultWalletInteractProvider,
      Provider<ExportWalletInteract> exportWalletInteractProvider,
      Provider<ImportWalletRouter> importWalletRouterProvider,
      Provider<TransactionsRouter> transactionsRouterProvider) {
    assert createWalletInteractProvider != null;
    this.createWalletInteractProvider = createWalletInteractProvider;
    assert setDefaultWalletInteractProvider != null;
    this.setDefaultWalletInteractProvider = setDefaultWalletInteractProvider;
    assert deleteWalletInteractProvider != null;
    this.deleteWalletInteractProvider = deleteWalletInteractProvider;
    assert fetchWalletsInteractProvider != null;
    this.fetchWalletsInteractProvider = fetchWalletsInteractProvider;
    assert findDefaultWalletInteractProvider != null;
    this.findDefaultWalletInteractProvider = findDefaultWalletInteractProvider;
    assert exportWalletInteractProvider != null;
    this.exportWalletInteractProvider = exportWalletInteractProvider;
    assert importWalletRouterProvider != null;
    this.importWalletRouterProvider = importWalletRouterProvider;
    assert transactionsRouterProvider != null;
    this.transactionsRouterProvider = transactionsRouterProvider;
  }

  @Override
  public WalletsViewModelFactory get() {
    return new WalletsViewModelFactory(
        createWalletInteractProvider.get(),
        setDefaultWalletInteractProvider.get(),
        deleteWalletInteractProvider.get(),
        fetchWalletsInteractProvider.get(),
        findDefaultWalletInteractProvider.get(),
        exportWalletInteractProvider.get(),
        importWalletRouterProvider.get(),
        transactionsRouterProvider.get());
  }

  public static Factory<WalletsViewModelFactory> create(
      Provider<CreateWalletInteract> createWalletInteractProvider,
      Provider<SetDefaultWalletInteract> setDefaultWalletInteractProvider,
      Provider<DeleteWalletInteract> deleteWalletInteractProvider,
      Provider<FetchWalletsInteract> fetchWalletsInteractProvider,
      Provider<FindDefaultWalletInteract> findDefaultWalletInteractProvider,
      Provider<ExportWalletInteract> exportWalletInteractProvider,
      Provider<ImportWalletRouter> importWalletRouterProvider,
      Provider<TransactionsRouter> transactionsRouterProvider) {
    return new WalletsViewModelFactory_Factory(
        createWalletInteractProvider,
        setDefaultWalletInteractProvider,
        deleteWalletInteractProvider,
        fetchWalletsInteractProvider,
        findDefaultWalletInteractProvider,
        exportWalletInteractProvider,
        importWalletRouterProvider,
        transactionsRouterProvider);
  }
}
